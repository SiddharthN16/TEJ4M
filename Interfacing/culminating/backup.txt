#include <LedControl.h>
#include <LiquidCrystal_I2C.h>

LedControl matrix = LedControl(12, 11, 10, 2);
LiquidCrystal_I2C lcd(0x27, 16, 2);

int pixels[8][8] = {
    {0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0, 0, 0, 0}};

byte displayOut[8] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

const int joy1X = A0;
const int joy1Y = A1;
const int joy2X = A2;
const int joy2Y = A3;

int paddle1Y, paddle2Y;

int ballX = 4;
int ballY = 3;
int speedX = 1;
int speedY = 1;

void setup()
{
    Serial.begin(9600);
    matrix.shutdown(0, false);
    matrix.setIntensity(0, 5);
    matrix.clearDisplay(0);
}

void loop()
{
    paddle1Y = map(analogRead(joy1Y), 25, 1000, 1, 6);
    paddle2Y = map(analogRead(joy2Y), 25, 1000, 1, 6);

    ballX += speedX;
    ballY += speedY;

    // bouncing off bottom or top of matrix
    if (ballY < 0 || ballY > 7)
    {
        speedY *= -1;
    }

    //TEMP
    if (ballX < 0 || ballX > 7)
    {
        ballX = 4;
        ballY = 3;
        speedX = 1;
        speedY = 1;
    }

    if (ballX = 7 && ballY == paddle1Y)
    {
        speedX *= -1;
    }

    if (ballX = 0 && ballY == paddle1Y)
    {
        speedX *= -1;
    }

    clearDisplay(displayOut, pixels);

    matrix.setLed(0, ballX, ballY, true);
    delay(50);
    matrix.setLed(0, ballX, ballY, false);

    createPaddle(7, paddle1Y);
    createPaddle(0, paddle2Y);
    renderDisplay(displayOut);
}

void renderDisplay(byte displayOut[8])
{
    for (int i = 0; i < 8; i++)
    {
        matrix.setRow(0, i, displayOut[i]);
    }
}

void clearDisplay(byte displayOut[8], int pixels[8][8])
{
    for (int i = 0; i < 8; i++)
    {
        for (int j = 0; j < 8; j++)
        {
            pixels[i][j] = 0;
        }

        displayOut[i] = 0x00;
    }
}

void addPixel(int xVal, int yVal)
{
    int column = xVal;
    pixels[yVal][column] = 1;

    displayOut[column] = toByte(column, pixels); // inserting a 1 at the required pixel
}

int toBinary(int exponent)
{
    int binary = 1;
    for (int i = 0; i < exponent; i++)
    {
        binary *= 2;
    }
    return binary;
}

int toByte(int column, int pixels[8][8])
{
    int total = 0;
    for (int i = 0; i < 8; i++)
    {
        if (pixels[i][column] != 0)
        {
            total += toBinary(i);
        }
    }
    return total;
}

void createPaddle(int column, int val)
{
    addPixel(column, val - 1);
    addPixel(column, val);
    addPixel(column, val + 1);
}